// <auto-generated />
using Core.Models;
using Core.Models.Pool;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace Core.Migrations.Core
{
    [DbContext(typeof(CoreContext))]
    [Migration("20171027074715_Pool")]
    partial class Pool
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.0-rtm-26452");

            modelBuilder.Entity("Core.Models.Pool.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .HasMaxLength(8);

                    b.Property<string>("Group")
                        .IsRequired()
                        .HasMaxLength(1);

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("DateTime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Country");
                });

            modelBuilder.Entity("Core.Models.Pool.Finals", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("DateTime");

                    b.Property<string>("LevelName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("LevelNumber");

                    b.HasKey("Id");

                    b.HasAlternateKey("LevelNumber");

                    b.ToTable("Finals");
                });

            modelBuilder.Entity("Core.Models.Pool.FinalsPlacing", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CountryId");

                    b.Property<int?>("FinalsId");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("DateTime");

                    b.HasKey("Id");

                    b.ToTable("FinalsPlacing");
                });

            modelBuilder.Entity("Core.Models.Pool.FinalsPrediction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CountryId");

                    b.Property<int>("FinalsId");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("DateTime");

                    b.Property<int>("PoolPlayerId");

                    b.Property<int>("SubScore")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.HasIndex("PoolPlayerId");

                    b.ToTable("FinalsPrediction");
                });

            modelBuilder.Entity("Core.Models.Pool.Match", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Country1Id");

                    b.Property<int>("Country2Id");

                    b.Property<int>("GoalsCountry1");

                    b.Property<int>("GoalsCountry2");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("DateTime");

                    b.Property<string>("Location")
                        .HasMaxLength(50);

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("DateTime");

                    b.HasKey("Id");

                    b.ToTable("Match");
                });

            modelBuilder.Entity("Core.Models.Pool.MatchFinals", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("Country1Id");

                    b.Property<string>("Country1Text")
                        .HasMaxLength(50);

                    b.Property<int?>("Country2Id");

                    b.Property<string>("Country2Text")
                        .HasMaxLength(50);

                    b.Property<int>("GoalsCountry1");

                    b.Property<int>("GoalsCountry2");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("DateTime");

                    b.Property<int?>("LevelNumber");

                    b.Property<string>("Location")
                        .HasMaxLength(50);

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("DateTime");

                    b.HasKey("Id");

                    b.HasIndex("LevelNumber");

                    b.ToTable("MatchFinals");
                });

            modelBuilder.Entity("Core.Models.Pool.MatchPrediction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("GoalsCountry1");

                    b.Property<int>("GoalsCountry2");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("DateTime");

                    b.Property<int>("MatchId");

                    b.Property<int>("PoolPlayerId");

                    b.Property<int>("SubScore")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.HasIndex("PoolPlayerId");

                    b.ToTable("MatchPrediction");
                });

            modelBuilder.Entity("Core.Models.Pool.PoolMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("DateTime");

                    b.Property<string>("Message")
                        .HasMaxLength(255);

                    b.Property<DateTime>("PlacedDate")
                        .HasColumnType("DateTime");

                    b.Property<int>("PoolPlayerId");

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.HasIndex("PoolPlayerId");

                    b.ToTable("PoolMessage");
                });

            modelBuilder.Entity("Core.Models.Pool.PoolPlayer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("DateTime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("OpenQuestions")
                        .HasMaxLength(500);

                    b.Property<int>("SubScore")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<string>("UserId")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("PoolPlayer");
                });

            modelBuilder.Entity("Core.Models.Post", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Content");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("Core.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("FirstName");

                    b.Property<bool>("IsLoggedIn");

                    b.Property<DateTime>("LastLoginDate");

                    b.Property<string>("LastName");

                    b.Property<string>("OwnerId");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Core.Models.Pool.FinalsPrediction", b =>
                {
                    b.HasOne("Core.Models.Pool.PoolPlayer")
                        .WithMany("FinalsPredictions")
                        .HasForeignKey("PoolPlayerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Core.Models.Pool.MatchFinals", b =>
                {
                    b.HasOne("Core.Models.Pool.Finals", "Finals")
                        .WithMany()
                        .HasForeignKey("LevelNumber");
                });

            modelBuilder.Entity("Core.Models.Pool.MatchPrediction", b =>
                {
                    b.HasOne("Core.Models.Pool.PoolPlayer")
                        .WithMany("MatchPredictions")
                        .HasForeignKey("PoolPlayerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Core.Models.Pool.PoolMessage", b =>
                {
                    b.HasOne("Core.Models.Pool.PoolPlayer")
                        .WithMany("PoolMessages")
                        .HasForeignKey("PoolPlayerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Core.Models.Pool.PoolPlayer", b =>
                {
                    b.HasOne("Core.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Core.Models.Post", b =>
                {
                    b.HasOne("Core.Models.User", "User")
                        .WithMany("Posts")
                        .HasForeignKey("UserId");
                });
#pragma warning restore 612, 618
        }
    }
}
